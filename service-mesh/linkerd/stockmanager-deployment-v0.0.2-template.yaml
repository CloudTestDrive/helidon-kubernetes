apiVersion: apps/v1
kind: Deployment
metadata:
  name: stockmanagerv0-0-2
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: stockmanager
      version: 0.0.2
  template:
    metadata:
      labels:
        app: stockmanager
        version: 0.0.2
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "9081"
        prometheus.io/scrape: "true"
    spec:
      containers:
      - name: stockmanager
        image: OCIR_LOCATION/OCIR_STORAGE_NAMESPACE/OCIR_REPO:0.0.2
        imagePullPolicy: Always 
        ports:
        - name: service-port
          containerPort: 8081
        - name: health-port
          containerPort: 9081
        env:
        - name: javax.sql.DataSource.stockmanagerDataSource.dataSourceClassName
          valueFrom:
            secretKeyRef:
              name: stockmanagerdb
              key: dataSourceClassName
        - name: javax.sql.DataSource.stockmanagerDataSource.dataSource.url
          valueFrom:
            secretKeyRef:
              name: stockmanagerdb
              key: url
        - name: javax.sql.DataSource.stockmanagerDataSource.dataSource.user
          valueFrom:
            secretKeyRef:
              name: stockmanagerdb
              key: username
        - name: javax.sql.DataSource.stockmanagerDataSource.dataSource.password
          valueFrom:
            secretKeyRef:
              name: stockmanagerdb
              key: password
        - name: hibernate.dialect
          valueFrom:
            secretKeyRef:
              name: stockmanagerdb
              key: hibernatedialect
        - name: hibernate.hbm2ddl.auto
          valueFrom:
            secretKeyRef:
              name: stockmanagerdb
              key: hibernateauto
        resources:
          limits:
            # Set this to be quarter of a CPU for now
            cpu: "250m"
#        # Use this to check if the pod is alive
#        livenessProbe:
#          #Simple check to see if the status call works
#          # If must return a 200 - 399 http status code
#          httpGet:
#             path: /health/live
#             port: health-port
#          # Give it a few seconds to make sure it's had a chance to start up
#          initialDelaySeconds: 120
#          # Let it have a 5 second timeout to wait for a response
#          timeoutSeconds: 5
#          # Check every 5 seconds (default is 1)
#          periodSeconds: 5
#          # Need to have 3 failures before we decide the pod is dead, not just slow
#          failureThreshold: 3
        # This checks if the pod is ready to process requests
#        readinessProbe:
#          exec:
#            command:
#            - /bin/bash
#            - -c
#            - 'curl -s http://localhost:9081/health/ready | grep "\"outcome\":\"UP\""'
#          # No point in checking until it's been running for at least 15 seconds
#          initialDelaySeconds: 15
#          # Allow a short delay for the response
#          timeoutSeconds: 10
#          # Check every 20 seconds
#          periodSeconds: 20
#          # Need at least only one fail for this to be a problem
#          failureThreshold: 1
        # Use this to check if the pod is started this has to pass before the liveness kicks in
        # note that this was released as beta in k8s V 1.18
#         startupProbe:
#          #Simple check to see if the status call works
#          # If must return a 200 - 399 http status code
#           httpGet:
#              path: /status
#              port: service-port
#          # No initial delay - it starts checking immediately
#          # Let it have a 5 second timeout
#           timeoutSeconds: 5
#          # allow for up to 12 failures
#           failureThreshold: 12
#          # Check every 10 seconds
#           periodSeconds: 10
#          # If after failureThreshold * periodSeconds it's not up and running then it's determined to have failed (2 mins in this case)
        volumeMounts:
        - name: sm-config-map-vol
          mountPath: /conf
          readOnly: true
        - name: sm-conf-secure-vol
          mountPath: /confsecure
          readOnly: true
        - name: sm-wallet-atp
          mountPath: /Wallet_ATP
          readOnly: true
      volumes:
      - name: sm-config-map-vol
        configMap:
          name: sm-config-map
      - name: sm-conf-secure-vol
        secret:
          secretName: sm-conf-secure
      - name: sm-wallet-atp
        secret:
          secretName: sm-wallet-atp
